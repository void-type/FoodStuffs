using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Swashbuckle.AspNetCore.SwaggerUI;
using System;
using System.IO;
using System.Text;
using VoidCore.AspNet.Security;
using VoidCore.Model.Guards;

namespace FoodStuffs.Web.Configuration
{
    public static class ServiceCollectionExtensions
    {
        public static IServiceCollection AddSwaggerWithCsp(this IServiceCollection services, IHostEnvironment _env)
        {
            if (_env.IsProduction())
            {
                return services;
            }

            services.AddHttpContextAccessor();

            services.AddSwaggerGen(c =>
            {
                // Use fully-qualified object names due to same-named request objects
                c.CustomSchemaIds(x => x.FullName);
            });

            // Add CSP nonces to Swashbuckle's embedded resources.
            // Borrowed from https://mderriey.com/2020/12/14/how-to-lock-down-csp-using-swachbuckle/
            services
                .AddOptions<SwaggerUIOptions>()
                .Configure<IHttpContextAccessor>((swaggerUiOptions, httpContextAccessor) =>
                {
                    // 2. Take a reference of the original Stream factory which reads from Swashbuckle's embedded resources
                    var originalIndexStreamFactory = swaggerUiOptions.IndexStream;

                    // 3. Override the Stream factory
                    swaggerUiOptions.IndexStream = () =>
                    {
                        // 4. Read the original index.html file
                        using var originalStream = originalIndexStreamFactory();
                        using var originalStreamReader = new StreamReader(originalStream);
                        var originalIndexHtmlContents = originalStreamReader.ReadToEnd();

                        // 5. Get the request-specific nonce generated by the VoidCore.AspNet.Security CSP Middleware.
                        var requestSpecificNonce = httpContextAccessor.HttpContext.EnsureNotNull(nameof(HttpContext)).GetNonce();

                        // 6. Replace inline `<script>` and `<style>` tags by adding a `nonce` attribute to them
                        var nonceEnabledIndexHtmlContents = originalIndexHtmlContents
                            .Replace("<script>", $"<script nonce=\"{requestSpecificNonce}\">", StringComparison.OrdinalIgnoreCase)
                            .Replace("<style>", $"<style nonce=\"{requestSpecificNonce}\">", StringComparison.OrdinalIgnoreCase);

                        // 7. Return a new Stream that contains our modified contents
                        return new MemoryStream(Encoding.UTF8.GetBytes(nonceEnabledIndexHtmlContents));
                    };
                });

            return services;
        }
    }
}
