// <auto-generated />
using System;
using FoodStuffs.Model.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodStuffs.Model.Migrations
{
    [DbContext(typeof(FoodStuffsContext))]
    [Migration("20250824220925_AddRecipeSideCount")]
    partial class AddRecipeSideCount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ShowInMealPlan")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.GroceryAisle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GroceryAisle", (string)null);
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.GroceryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("GroceryAisleId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroceryAisleId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GroceryItem", (string)null);
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileName")
                        .IsUnique();

                    b.HasIndex("RecipeId");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.MealPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MealPlan", (string)null);
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.MealPlanExcludedGroceryItemRelation", b =>
                {
                    b.Property<int>("MealPlanId")
                        .HasColumnType("int");

                    b.Property<int>("GroceryItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("MealPlanId", "GroceryItemId");

                    b.HasIndex("GroceryItemId");

                    b.ToTable("MealPlanExcludedGroceryItemRelation", (string)null);
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.MealPlanRecipeRelation", b =>
                {
                    b.Property<int>("MealPlanId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("MealPlanId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("MealPlanRecipeRelation", (string)null);
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CookTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Directions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsForMealPlanning")
                        .HasColumnType("bit");

                    b.Property<int>("MealPlanningSidesCount")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PinnedImageId")
                        .HasColumnType("int");

                    b.Property<int?>("PrepTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Sides")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PinnedImageId");

                    b.ToTable("Recipe", (string)null);
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.RecipeGroceryItemRelation", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("GroceryItemId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "GroceryItemId");

                    b.HasIndex("GroceryItemId");

                    b.ToTable("RecipeGroceryItemRelation", (string)null);
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.StorageLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StorageLocation", (string)null);
                });

            modelBuilder.Entity("GroceryItemStorageLocationRelation", b =>
                {
                    b.Property<int>("GroceryItemId")
                        .HasColumnType("int");

                    b.Property<int>("StorageLocationId")
                        .HasColumnType("int");

                    b.HasKey("GroceryItemId", "StorageLocationId");

                    b.HasIndex("StorageLocationId");

                    b.ToTable("GroceryItemStorageLocationRelation");
                });

            modelBuilder.Entity("RecipeCategoryRelation", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeCategoryRelation");
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.GroceryItem", b =>
                {
                    b.HasOne("FoodStuffs.Model.Data.Models.GroceryAisle", "GroceryAisle")
                        .WithMany("GroceryItems")
                        .HasForeignKey("GroceryAisleId");

                    b.Navigation("GroceryAisle");
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.Image", b =>
                {
                    b.HasOne("FoodStuffs.Model.Data.Models.Recipe", "Recipe")
                        .WithMany("Images")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodStuffs.Model.Data.Models.ImageBlob", "ImageBlob", b1 =>
                        {
                            b1.Property<int>("ImageId")
                                .HasColumnType("int");

                            b1.Property<byte[]>("Bytes")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.HasKey("ImageId");

                            b1.ToTable("ImageBlob", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ImageId");
                        });

                    b.Navigation("ImageBlob")
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.MealPlanExcludedGroceryItemRelation", b =>
                {
                    b.HasOne("FoodStuffs.Model.Data.Models.GroceryItem", "GroceryItem")
                        .WithMany()
                        .HasForeignKey("GroceryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodStuffs.Model.Data.Models.MealPlan", null)
                        .WithMany("ExcludedGroceryItemRelations")
                        .HasForeignKey("MealPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroceryItem");
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.MealPlanRecipeRelation", b =>
                {
                    b.HasOne("FoodStuffs.Model.Data.Models.MealPlan", null)
                        .WithMany("RecipeRelations")
                        .HasForeignKey("MealPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodStuffs.Model.Data.Models.Recipe", "Recipe")
                        .WithMany("MealPlanRelations")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.Recipe", b =>
                {
                    b.HasOne("FoodStuffs.Model.Data.Models.Image", "PinnedImage")
                        .WithMany()
                        .HasForeignKey("PinnedImageId");

                    b.Navigation("PinnedImage");
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.RecipeGroceryItemRelation", b =>
                {
                    b.HasOne("FoodStuffs.Model.Data.Models.GroceryItem", "GroceryItem")
                        .WithMany()
                        .HasForeignKey("GroceryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodStuffs.Model.Data.Models.Recipe", null)
                        .WithMany("GroceryItemRelations")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroceryItem");
                });

            modelBuilder.Entity("GroceryItemStorageLocationRelation", b =>
                {
                    b.HasOne("FoodStuffs.Model.Data.Models.GroceryItem", null)
                        .WithMany()
                        .HasForeignKey("GroceryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodStuffs.Model.Data.Models.StorageLocation", null)
                        .WithMany()
                        .HasForeignKey("StorageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeCategoryRelation", b =>
                {
                    b.HasOne("FoodStuffs.Model.Data.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodStuffs.Model.Data.Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.GroceryAisle", b =>
                {
                    b.Navigation("GroceryItems");
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.MealPlan", b =>
                {
                    b.Navigation("ExcludedGroceryItemRelations");

                    b.Navigation("RecipeRelations");
                });

            modelBuilder.Entity("FoodStuffs.Model.Data.Models.Recipe", b =>
                {
                    b.Navigation("GroceryItemRelations");

                    b.Navigation("Images");

                    b.Navigation("MealPlanRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
